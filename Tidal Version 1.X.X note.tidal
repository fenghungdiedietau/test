
https://tidalcycles.org/index.php/Combining_pattern_structure


--cps becomes a function

d1 $ sound "[koy(3,8) fest]"
   # cps (slow 4  $ range 0.08 0.04 saw)
  |* cps (slow (slow 12 $ range 1 100 $ sine) $ range 1500 10 square)


d1 $ sound "bd"  + cps ( segment 100 $ range 1 100 $ sine )

hush

---start a track from d1 ~ d16

d16 $ note ((scale "dorian" $ "{6 . 2 3 4 , ~ . ~ [10 8] 9 . 10 11 ~ 8}%2")) #s "gtr" # gain 1

hush

-- segment (discretize) // range (scale)
d1
  -- $ chop 10
  $ speed(slow (smooth "12 10 40 4")
  $ segment (choose[83,56,29,44,90])
  $ range 12 ( segment 12 $range 12 (-1) $cF 1 "12") $ sine)
  + sound "mouth"
  + n (slow 3 $ segment  (choose[13,26,19,54,89]) $ range 12 (-12) $ sine )
  -- # cps (slow 30  $ range 0.8 1.3 saw)
  + attack (slow 24 $ segment (100) $ range 1 0.3 saw)

  hush

  d1 $ n (run (segment 8 $ range 0 10 $ cF 1 "12")) # sound "[cp]"

  d1
  $ density ( segment 2 $ range 0 1 $ cT 1 "13")
  $ n (run ( segment 2 $ range 0 10 $ cF 1 "12")) # sound "[bd]"

--smooth 

d1
 $ sound "sax*15"
 |+ speed (slow 5.555555 $ smooth "-1 0.9 2 8@3" )
 # nl


hush

---amenbreaks battlefields
d2
$ every 6 ((slow 1.25).(linger 0.125))
$ every 4 (sometimes $ within (0,0.25) $ off (1.2) (stut' 100  1.2 (+ speed (segment 3.5 $ smooth "-1 2"))))
$ every 7 (sometimes $ within (0.2,1.6) $ off (1.25) (+ n (run 4)).(+ speed "3.8"))
$ n ( run "<4 8 4 6>"
      +| smooth ((iter 12)"-10 <0 3 10 210> <10 210 ~>?")
      + (range 0 10 $ segment 9 $ sine )
      -- + (slow 114 "0 .. 113")
      )
# sound "[amencutup]"



hush

--MIDI ctrl

setcps (1)

hush

p "gerard" $ sound "hh hh hh hh"

p "gerard" silence


In this example, the pattern originates from the shape of a sine wave,
a continuous pattern. Without segment the samples will get triggered at
an undefined frequency which may be very high.

hush


d1 $ fast 0.5 $ iter 4 $ sound "numbers:1 numbers:2 numbers:3 numbers:4"

d1 $ sound "[voodoo voodoo:3, arpy arpy:4 arpy:2]"

d1 $ sound "{voodoo voodoo:3, arpy arpy:4 arpy:2}"

hush

d1 $ euclid 3 8 $ sound "bd*2 [sn cp]"

d1 $ sound "bev ~" # cut 1

d2 $ slow 4 $ sound "pebbles ~"
# cut 1

d1 $ randslice 32 $ sound "bev"

setcps (1)

d2 $ n (scan 10) # sound "amencutup"
# cut 1

hush

d1 $ sound "tink*16"
   # gain (segment 4 $ range 2 (1)  $ rand)

   d1 $ degradeBy 0.1 $ sound "tink*16"


--Osc
cF is what you use for floating point controls.
The second parameter1 is the default value,
for when tidal hasn't received that control yet.
There is also cS for strings and cI for integers.
For time values (for using e.g. as the first parameter of fast/slow), use cT.

--cT
   d1
   -- $ density (cT 1 "12")
   -- $ fast (cT 1 "12")
   -- $ slow (cT 1 "12")
   $ sound "bd*1"
   -- # speed (cF 1 "hello")

--cF

   d1 $ sound "bd*13"
   # speed (cF 1 "12")
   # cps (cF 1 "12")

d1 $ sound "amencutup" + n (run (discretise 1 $ range 1 16 $ cF 0 "12" ))

   hush

---------- Yaxu q&a----------
https://www.youtube.com/watch?v=-RXleibnFKM

d1 $ s "bd*10"
   # coarse (segment 8 $ range 1 5 $ sine)

--this fail because coarse :: Pattern Int -> ControlPattern
--variable need to be integer

:t (segment 8 $ range 1 5 $ sine)

:t (round <$> (segment 8 $ range 1 5 $ sine))

d1 $ s "bd*10"
   # coarse (round <$> (segment 8 $ range 1 5 $ sine))

hush

------ struct & sew --------

d1 $ struct (every 4 inv "t [f t] [t f] f") $ sound "bd" # speed 2

d2 $ jux rev $ sew (every 3 inv "t f t f")
  (sound "bd (5,16,<2 4>)")
  (sound "cp (5,8,2)")
  # speed "<2 4>"

d2 $ jux rev $ sew (every 3 inv "t [f t] ~")
  (sound "bd*7")
  (sound "cp*8")
  -- # speed "<2 4>"

hush

:t sew

:t struct

------------sew------------
Type: Pattern Bool -> Pattern a -> Pattern a -> Pattern a

sew Uses a pattern of boolean (true or false) values to switch between two other patterns.
For example the following will play the first pattern for the first half of a cycle,
and the second pattern for the other half.

d1 $ sound (sew "t f" "bd*8" "cp*8")

The above combines two patterns of strings, and passes the result to the sound function.
It's also possible to sew together two control patterns, for example:

d1 $ sew "t <f t> <f [f t] t>" (n "0 .. 15" # s "future") (s "cp:3*16" # speed saw + 1.2)

You can also use Euclidean rhythm syntax in the boolean sequence:

d1 $ sew "t(11,16)" (n "0 .. 15" # s "future") (s "cp:3*16" # speed sine + 1.5)


---------- selectF//select

d1 $ selectF (cF 0.5 "22") [id,rev, fast 2,(+ speed 2)] $ sound "cp(3,8)"

hush

--------------------------

:t select

d2 $ sound (select (cF 0.5 "21") ["sn:4*3","bd*3"])



----------- Yaxu q&a End -----------

hush

xfade "yes" $ sound "yes:14"

xfadeIn 1 16 $ sound "bd(5,8)"

xfade "susan" $ sound "gabba(3,8,<0 2 4>)"

xfade "susan" $ sound "cp*2"

:t xfade


The different arpeggiate modes are:

up down updown downup up&down down&up converge
diverge disconverge pinkyup pinkyupdown
thumbup thumbupdown

The different chords available are:

major maj minor min major7 maj7 dom7 minor7 min7 aug
dim dim7 one 1 five 5 plus sharp5 msharp5 sus2 sus4 six 6
m6 sevenSus2 7sus2 sevenSus4 7sus4 sevenFlat5 7f5 m7flat5
m7f5 sevenSharp5 7s5 m7sharp5 m7s5 nine m9 m7sharp9 m7s9
maj9 nineSus4 ninesus4 9sus4 sixby9 6by9 m6by9 sevenFlat9
7f9 m7flat9 m7f9 sevenFlat10 7f10 nineSharp5 9s5 m9sharp5
m9s5 sevenSharp5flat9 7s5f9 m7sharp5flat9 eleven 11 m11
maj11 elevenSharp 11s m11sharp m11s thirteen 13 m13

let shrand n = (n <~) $ rand


d1
  $ sound "numbers"
  # n (choose [1 .. 9])

d1
  $ sound "numbers"
  # n (choose [1,2 .. 9])

d1
  $ sound "numbers"
  + speed (segment 10 (choose [1,1.25 .. 3]))

d1
  $ sound "numbers"
  + speed (segment 10 (choose [1,2 .. 3]))

hush


d1
  $ sound "numbers"
  # n (choose [1 .. 9])


d3 $ sew "(3,8)" ( sound "jvbass*4") ( sound "cp(2,8)")


--from Kindohm's Twitch streaming

let shrand n = (n <~)  $ rand

d1 $ degrade $ s "byd:2*16"
-- # speed (range 0.9 1.2 $ shrand 10)

d2 $ degrade $ s "arpy*16"

hush

d3 $ degrade $ s "byd:2*16" # shrand 2

d4 $ degrade $ s "arpy*16" # shrand 3

hush

d1 $ s (segment 10 (choose ["arpy","byd"])) # shrand 2

d1 $ s (segment 10 (choose ["sn","cp"])) |* n ((21 <~) $ rand)

d2 $ s (segment 10 (choose ["sn","cp"])) |* n ((4) <~)  $ rand) # shrand 44

echophon 11:07 AM tidal


d1 $ stack [
  s "notes ~ ~ ~" # speed (range 0.5 4 $ shrand 0),
  s "~ notes ~ ~" # speed (range 0.5 4 $ shrand 1),
  s "~ ~ notes ~" # speed (range 0.5 4 $ shrand 2)
]

hush

---------

d2 $ fast 2 $ n (spread toScale [[0,3,7],[3,7,11]] (run 4))
# s "superpiano" # legato 2 # sustain 1.4 # gain 0.7


------

d1 $ fast 2 $ "bd*8" # speed "-1" # sus 0.1 + 0.05*(slow 4 sine)

vs

d1 $ fast 2 $ "bd*8" # speed "-1" # sus (slow 4 sine*0.05 + 0.1 )

==

d1 $ fast 2 $ "bd*8" # speed "-1" # sus (0.1 + 0.05*(slow 4 sine))

hush

"1 _ _ 1 _ _ 1 _"
aka "1@3 1@3 1@2"

d1
 $ slow 4
 $ n (spread toScale [hexDorian, kumai, hirajoshi, iwato] "[0 1 2 3  4 3 2 1  0 -1 0 -1  0@4]")
 # s "supermandolin" # sustain "[1 1 1 4]"


 ----
 linger' :: Pattern Time -> Pattern Time -> Pattern d -> Pattern d

linger' = tParam2 (\m n p -> _fast (1/n) $ zoomArc (Arc m (m+n)) p)

d1 $ linger' ("<[0 1 2 3 4 5 6 7] [0 1 2 0 1 2 0 1]>"/8) ("1"/8) $ s "bd hh sn:1 hh hh bd sn:1 bd"

hush

d1 $ stack $ map ($ "bd sn") [id, (0.25 <~) . fast 2]

hush


d1 $ sound "bd*32" # speed (perlin + 0.5)


d1 $ s "cp*16" + gain ( squeezeJoin $ const saw <$> ("1(3,10)" :: Pattern Int) )

let otrigger osc string = ( squeezeJoin $ const osc <$> (string :: Pattern Int) )

d1
$ sound "cp*<8 16 4 <8 16 8 32>*4>*1.5"
# cutoff (otrigger (rangex 15000 200 (inside "<1 2>*5" (foldEvery [3,4,5,6] (("[1 2 1]"/8) <~))
$ slow "<1 4 2 0.5>*8" $ saw)) "1 _ _ 1 _ _ 1 _")
# resonance ("[8 1 4 1 2 1]*4%6"/16)
# release (range 0.05 0.5 (slow 2 $ saw))

hush

----

d1
  $ sound "bd*2 cp:4(5,8,<0 2>)"
  # gain (trigger 1 $ slow 2 envL)

d1
  $ sound "bd*2 cp:4(5,8,<0 2>)"
  # djf (trigger 2 $ range 0.1 0.9 $ slow 2 envL)

d1
  $ sound "cp*32"
  # gain ( range 0.7 1 $ every 3 (slow 2) $ otrigger saw " 1 _ _ _ 1 _ _ 1 " )

d1
  $ sound "cp*12" # gain ( range 0.7 1 $ trigger 1 saw )


-----tresillo-----

d1 $ (|+| gain "[[0.5 0 0 0] [0 0 0.5 0] [0] [0.5 0 0 0]]") $ sound "hh*16" # gain 0.5

d1 $ sound "hh*16" # gain "[[1 0.5 0.5 0.5] [0.5 0.5 1 0.5] [0.5] [1 0.5 0.5 0.5]]"

d1 
  -- $ fast 2
  $ s "hh*16"  
  + gain 0.5
  + gain "0.5(3,8)"

d1 
  $ s "hh*16"  
  # gain (euclidFull 3 8 1 0.5)

d1 
  $ s "hh*16"  
  # gain (sew "t(3,8)" 1 0.7)


  d1 $ sound "hh*16" |+| gain (sew "t(3,8)" "1*8" "0.75*8")
 
  unfortunately

  d1 $ sound "hh*16" |+| gain (sew "t(3,8)" 1 0.75) 
  
  doesn't work, but it'd be nice if it did 


hush


d1 $ sound "hh*16" # gain (euclidFull 3 8 1 0.7) 

produces xx.. ..xx ..xx .... which is correct but not what I wanted.

d1 $ sound "hh*16" # gain (euclidFull 3 16 1 0.7) # cps 0.5 

produces x... .x.. ..x. .... with is also correct. 

d1 $ sound "hh*16" # gain (euclidFull 3 "<7 8 8 8>" "1 0.7" "<0.7 0.3 0.7>")
   # cps 0.5


d1 $ sound "hh*16" # gain (euclidFull 3 8 "1 0.7" 0.7) 

d1 $ sound "hh*16" # gain " [1(3,8),0.5(^3,8)]"
--yaxu: yes I'm only proposing the ^ bit, it doesn't exist yet 

d1 $ sound "hh*16" # gain (euclidFull 3 "<8 9 4>" "1 0.7" (choose [0.8,0.1,0.9])) 

hush

:t euclidFull


 d1 $ n (euclidFull 6 15 "1" "0" |+| euclidFull 7 14 "3" "5") # s "supersaw" # cps 0.2


  d1 $ gain (euclidFull "<3 12 5 6>" "8 16" "0.3" "0 2 1.6 1") # s "808" # cps 0.5
    |+ n (euclidFull "<12 5 6>" "4 12" (choose [1,4,5,6,10]) (run 4))

    hush

  d2 $ s "bd(3,16)" # gain 2 

     hush

     setcps (93/60/4)
     
     do
       d1 $ stut 3 0.1 (-1/16) $ sound "[hh ~ hh ~]*4"
       d2 $ sound "[bd ~ ~ ~] [rs ~ ~ bd] ~ [rs ~ ~ <~ bd>]"
       d3 $ every 4 (|+| up 1) $ sound "arp/2" # cut 1 # amp 1
       d4 $ stut' 2 (1/8) (|*| speed (choose [1, -0.5, 2])) $ sound "arp:1(3,8,2)" # end (slow 2 $ range 0.0125 0.125 $ sine) # amp 0.4
       d5 $ every 4 (|+| up 1) $ n (choose [0 .. 5]) >| sound "[bass1] [bass1 _ ~ bass1] ~ [bass1 _ ~ <~ bass1>]" # up "1 [8 1] 1 8"

  hush


  d1 $ sound "bd*2 cp:4(5,8,<0 2>)"
  # djf (trigger 1 $ range 0.1 0.9 $ slow 2 envL)
  # cps 1

--1.1.2
--BootTidal.hs now sends d1 .. d12 to orbits 0 .. 11 respectively @yaxu
  
d1 $ s "bd ~" # room 0.9 --( # orbit 1)

d2 $ s "~ bd" # room 0   --( # orbit 2)

d1 silence  

--markov chain support with runMarkov and markovPat @bgold-cosmos
--waiting for tutorial

runMarkov n tmat xi generates a Markov chain (as a list) of length n
using the transition matrix tmat starting from initial state xi.
Each entry in the chain is the index of state (starting from zero).
Each row of the matrix will be automatically normalized. For example:

runMarkov 8 [[2,3], [1,3]] 0

will produce a two-state chain 8 steps long, from initial state 0, where the
transition probability from state 0->0 is 2/5, 0->1 is 3/5, 1->0 is 1/4, and
1->1 is 3/4.

markovPat n xi tp generates a one-cycle pattern of n steps in a Markov
chain starting from state xi with transition matrix tp. Each row of the
transition matrix is automatically normalized. For example:

tidal> markovPat 8 1 [[3,5,2], [4,4,2], [0,1,0]]

(0>⅛)|1
(⅛>¼)|2
(¼>⅜)|1
(⅜>½)|1
(½>⅝)|2
(⅝>¾)|1
(¾>⅞)|1
(⅞>1)|0

--add setI, setF et al to BootTidal.hs for setting state variables @yaxu
set state with external controller


--new stitch function @yaxu
--stitch is similar to sew, t the first pattern, f the second.
--with stitch, the structure comes from the boolean pattern
:t stitch

d1 $ stitch bizy (s"byd*5") (s"byd*4" # speed 2) 

d1 $ sew bizy (s"byd*5") (s"byd*4" # speed 2)  

hush


hush

once $ s "longsample" # loop "10"

do
  {
    resetCycles;
    d1 $ every 3 (0.25 <~) $ every 4 (0.25 <~)
    $ stack [s "[~ sd ~ ~]*2" # gain "0.7",
                s "[~ ~ ~ hh]*2" 
        ]
  }

Kindohm
I think some very weird and beautiful things happen when you mix cps changes inside pattern 
transitions like clutchIn

d2 $ sound "bd:3*4"

d3 $ n "c3 cs4 b2 as2 c3 d3 cs3 c3 cs4 b2 as2 c3 d3 cs3 d3 d3" 
# sound "superpwm(3,2)" 
# decay "[0.3 0.1 0.2 0.24 0.6]/2" 
# voice "[0.3 0.4 0.5 0.6 0.7 0.8 1]/2" 
# cutoff "1200 2400 3600 480"

d3 $ n (segment 16 $ (irand 10)-32) # sound "supersaw(3,2)" # decay "[0.4 0.6 0.8 0.92 1]/2" # voice "[0.3 0.4 0.5 0.6 0.7 0.8 1]/2" # cutoff "1200 2400 3600 480"


--------------microtonal

let n2edo edo p = (\x -> x*12/edo) <$> p

d1 $ n (n2edo 15 (slow 2 $ "[<10 25 40 55> .. 90]")) # s "superpiano"

hush


-------- <(irand)> works in new version?
d4 $ s "<notes*4 feelfx*8>" # gain 0.9 # n (cat [irand 8, "0"] ) --O

d4 $ s "<notes*4 feelfx*8>" # gain 0.9 # n "<(irand 8) 0>" --X

YAXU 凌晨3點11分
I think you want
loopFirst, e.g. 

d1 
$ repeatCycles 4 
$ sound "arpy*8" 
# n (loopFirst $ irand 10)

There's also timeLoop if you want to loop more than one cycle 
  
d1 
$ fast 2
$ sound "arpy*8" # n (timeLoop 3 $ irand 8)

If you want a different bit of the random timeline just shift with <~, e.g. 

d1 $ sound "arpy*8" # n (loopFirst $ 105 <~ (irand 8)) 


d1 $ sound "arpy*8" # n (timeLoop 1.2 $ 105 <~ (irand 8))

--------timeloop & loopfirst

d1 
$ loopFirst 
$ s "yes" # nl


:t timeLoop

d1 
$ timeLoop 4 $  s "yes" # nl

hush



is there a way to increment a variable in Haskell/Tidal?
I'd like to shift a pattern every N cycles, but keep the shift, so it accumulates

I would like this too, but have never asked about it. I am guessing it goes against Tidal's stateless nature, but am interested if there is a way to do it.
 
Well this gives you the current cycle number

cyc = (toRational . floor) <$> sig id


then to cumulatively shift by a quarter cycle cycle you could do
(cyc/4) <~
or to shift by a quarter cycle every third cycle you could do (slow 3 $ cyc/4) <~

cshift phase step = ((slow phase $ ((toRational . floor) <$> sig id)/step) <~)

you should be able to use that like
cshift 2.5 0.25 $ ... to shift by a quarter of a cycle every 2.5 cycles 

d1
$ ((cyc/5) <~)
$ s "byd*2" 

d3 
$ ( "<0 0.2 0.4 0.6 0.8>" <~) 
$ s "cp*2" 


d2 $ s "sn*2" # gain 0.7

hush


d1 $ s "bd" # speed (range 1 2 $ rand)

d1 $ s "bd" + speed (segment (1/1000) $ range 1 2 $ rand)

d1 $ s "808" + speed (loopFirst $ segment 4 $ range 1 2 $ rand)

d2 $ s "808" + speed (loopFirst $ segment 10 $ range 1 2 $ rand # shrand 10)



do
  setcps 0.068
  
  d1 $ off 0.5 (|* speed 0.5)
    $ nSpeed ((arp "up" (toScale [0,0.0391415 .. 12.0] "cs1'min7'32"))) # s "piano:2"
    |/ speed "2.8 1.0 0.8" |/ speed 2 # hpf (sine' 20 100 1)
    # room 0.4 # size 0.9 # attack 0.6 # release 2 # gain 0.85

  d2 $ nSpeed ((toScale [0,0.00623415 .. 12.0] "cs1'min7'64")) # s "piano:2"
    # room 0.4 # size 0.9 # attack 0.2 # release 4 # gain 0.6


hush


1.4.5

Elongate a pattern with "@" "_"

--mininotaion:@ 
d1 $ s "superpiano@2 superpiano"

==>[X 0 X]

d2 $ s "supergong ~ supergong"

--mininotaion:_ 
d3 $ s "bd _ bd"





---------1.49

do 

  let quantise n = fmap ((/n) . fromIntegral . floor . (*n))
  
  d1 
  $ n (scale "major" (round <$> (range 0 12 $ sine)))
  +| s "superpiano*15"

:t scale

hush

d1
$ n (scale "major" (segment 16 $ quantise 1 (range 0 8 sine)))
# s "supersquare"

d1
$ s "superpiano"
# n (scale "major" (struct "t(3,8)" $ quantise 1 (range 0 8 sine)))

d1 $ n (scale "major" (fmap round (struct "t(3,8)") $ quantise 1 (range 0 8 sine))) $ s "superpiano"

d1 $ n (scale "major" (round<$>(range 0 8 sine))) 

d1 $ s "superpiano*8" # n (quantise 1 $ range 0 7 $ sine)

hush

---draw and drawLine

draw "{a a ~ [[a b] b] a}%21"

drawLine "[a b <c [d e]>, x(3,8,<0 2 4>)]"

drawLine "[a b <c [d e]>, x(3,8,<0 2 4>),h h ~]"

drawLine "[x(3,8,1)]" 

d1 $ tala 2 4 5 $ s "bd"

hush

draw "{0 0 ~ [[0 1] 2] 0}%21"


d1
-- $ layer [id,(# s"arpy").(# gain (choose [1,0])) ] 
$ superimpose ((# s"arpy").(# gain (choose [1,0]))) 
$ s "bd*8" # gain (choose [0,1])


d2
$ degrade
$ s "cp*8" 

hush

d2
-- $ degradeBy 0.4
$ s "cp*10" 

hush

degradeBy :: Double -> Pattern a -> Pattern a

degradeByR x p = unMaybe $ (\a f -> toMaybe (f > x) a) <$> p <*> rand
    where toMaybe False _ = Nothing
          toMaybe True a  = Just a
          unMaybe = (fromJust <$>) . filterValues isJust