
https://tidalcycles.org/index.php/Combining_pattern_structure


--cps becomes a function

d1 $ sound "[sn(3,8) cp]"
   # cps (slow 5  $ range 0.8 4 saw)
   * cps (slow ( segment 1 $ range 1 100 $ cT 1 "12") $ range 150 1 square)
   + n (segment 2 $ irand 10)

hush

--d1 ~ d16



d1 $ note ((scale "dorian" $ "{6 . 2 3 4 , ~ . ~ [10 8] 9 . 10 11 ~ 8}%2")) #s "gtr" # gain 1

hush

-- segment (discretize) // range (scale)
d1
  -- $ chop 10
  $ speed (slow (smooth "100 10 40 4")
  --
  $ segment (choose[83,56,29,44,90])
    --
  $ range 12 ( segment 12 $range 12 (-1) $cF 1 "12") $ sine)
  + sound "jvbass"
  + n (slow 3 $ segment  (choose[13,26,19,54,89]) $ range 12 (-12) $ sine )
  -- # cps (slow 30  $ range 0.8 1.3 saw)
  -- + attack (slow 24 $ segment (100) $ range 1 0.3 saw)
  + gain 1.4

  hush

  d1
  $ density 0.2
  $ n (run ( segment 2 $ range 0 10 $ cF 1 "12")) # sound "[cp]"

  hush

  d1
  $ density ( segment 2 $ range 0 1 $ cT 1 "13")
  $ n (run ( segment 2 $ range 0 10 $ cF 1 "12")) # sound "[bd]"



  d2 $  sound "[cp]"

--smooth / smooth

d1
-- $ slow ("[0*10 0*10 2*20 1]" + smooth "0 10 200")
$ sound "808*10"
-- + n (scan 10)
-- + speed ("0*10" + smooth "-1 0.9 1.1" )
# n (cF 1 "12")
-- + speed "0 0 2*2 1"
+ cut 1

hush

d2
$ every 6 ((slow 1.25).(linger 0.125))
$ every 10 (sometimes $ within (0,0.25) $ off (1.2) (stut' 100  1.2 (+ speed (segment 3.5 $ smooth "-1 2"))))
-- $ every 16 (sometimes $ within (0.2,0.6) $ off (1.25) (+ n (run 4)).(+ speed "0.8"))
$ n ( run "<4 8 4 6>"
      +| smooth ((iter 12)"-10 <0 3 10 210> <10 210 ~>?")
      + (range 0 10 $ segment 9 $ sine )
      -- + (slow 114 "0 .. 113")
      )
+ sound "[amencutup]"
# gain 1.2
-- # cut 2

d2 silence

d3
$ every 10 (sometimes $ within (0,0.2) $ off (1.2) (stut' 90 1.2 (+ speed "-1")))
$ every 6 (# release 0.49)
$ every 12 (degrade)
$ stut' 4 0.65 ((# lpf (range 1200 13000 $ segment 24 $ saw)).(rev))
-- $ every 16 (sometimes $ within (0.2,0.6) $ off (1.25) (+ n (run 4)).(+ speed "0.8"))
$ off 0 ((# speed "-1").(# begin (slow 2.5 $ range 0 0.5 $ segment 12 $ saw )).(# release 1))
$ n (
      run "<4 8 4 6>"
      -- +| smooth ((iter 12)" -10 <0 3 10 210> <10 210 ~>?")
      + (range 0 10 $ segment 9 $ sine )
      + (slow 114 "0 .. 113")
      )
+ sound "[yes]"
# cut 3

--MIDI ctrl

setcps (1)

d1
-- -- $ slow 20
-- $ every 6 ((rev).(# pan (range 0.15 0.85 $ rand)))
-- $ every 7 ((rev).(# pan (range 0.25 0.75 $ rand)).(+ accelerate (segment 1 $ range 0 0.2 $ cF 1 "13" )))
-- $ every 16 (sometimes $ within (0.2,0.6) $ off (1.3) (+ n (run 32)).(+ speed "0.91"))
-- $ slow "[1,2..10]"
-- $ loopAt 1
$ chop 10
-- $ striate 10
-- (segment 2 $ range 0.1 0.9 $ cF 0.4 "12")
 -- (scan 120)
-- "<10 11 12 9 8 11 30 12 1 3 5 12>"
-- "[40(3,8),10(11,24,14),30(3,8),100(11,24,14)]"
-- "[25(3,8)|%|5,120(3,8)*4]|%|10"
-- $ n (run "<4 8 4 6>" + smooth ((iter 14)"-1 <0 3 10 210> <10 210 ~>"))
$ sound "[amencutup:6]"
-- $ every 3 (sometimes $ within (0,1) $ off (1.2) (stut' 100  1.2 (+ speed "-1")))
-- # cps (slow (segment 12 $ range 1 200 $ cT 5 "12" )  $ segment 1 $ range 0.8 3 saw)
-- + attack (segment 1 $ range 0 0.1 $ cF 1 "13" )
-- + hold "5"
-- + release "2"
-- + lpf (segment 10 $ range 250 4500 $ cF 300 "12" )
# cut 0

hush

p "gerard" $ sound "hh hh hh hh"

p "gerard" silence


In this example, the pattern originates from the shape of a sine wave,
a continuous pattern. Without segment the samples will get triggered at
an undefined frequency which may be very high.

hush



d1 $ fast 0.5 $ iter 4 $ sound "numbers:1 numbers:2 numbers:3 numbers:4"

d1 $ sound "[voodoo voodoo:3, arpy arpy:4 arpy:2]"

d1 $ sound "{voodoo voodoo:3, arpy arpy:4 arpy:2}"

hush

d1 $ euclid 3 8 $ sound "bd*2 [sn cp]"

d1 $ sound "bev ~" # cut 1

d2 $ slow 4 $ sound "pebbles ~"
# cut 1

d1 $ randslice 32 $ sound "bev"

setcps (1)

d2 $ n (scan 10) # sound "amencutup"
# cut 1

hush

d1 $ sound "tink*16"
   # gain (segment 4 $ range 2 (1)  $ rand)

   d1 $ degradeBy 0.1 $ sound "tink*16"


--Osc
cF is what you use for floating point controls.
The second parameter1 is the default value,
for when tidal hasn't received that control yet.
There is also cS for strings and cI for integers.
For time values (for using e.g. as the first parameter of fast/slow), use cT.

--cT
   d1
   -- $ density (cT 1 "12")
   -- $ fast (cT 1 "12")
   -- $ slow (cT 1 "12")
   $ sound "bd*1"
   -- # speed (cF 1 "hello")

--cF

   d1 $ sound "bd*13"
   # speed (cF 1 "12")
   # cps (cF 1 "12")

d1 $ sound "amencutup" + n (run (discretise 1 $ range 1 16 $ cF 0 "12" ))

   hush

---------- Yaxu q&a----------
https://www.youtube.com/watch?v=-RXleibnFKM

d1 $ s "bd*10"
   # coarse (segment 8 $ range 1 5 $ sine)

--this fail because coarse :: Pattern Int -> ControlPattern
--variable need to be integer

:t (segment 8 $ range 1 5 $ sine)

:t (round <$> (segment 8 $ range 1 5 $ sine))

d1 $ s "bd*10"
   # coarse (round <$> (segment 8 $ range 1 5 $ sine))

hush

------ struct & sew --------

d1 $ struct (every 4 inv "t [f t] [t f] f") $ sound "bd" # speed 2

d2 $ jux rev $ sew (every 3 inv "t f t f")
  (sound "bd (5,16,<2 4>)")
  (sound "cp (5,8,2)")
  # speed "<2 4>"

d2 $ jux rev $ sew (every 3 inv "t [f t] ~")
  (sound "bd*7")
  (sound "cp*8")
  -- # speed "<2 4>"

hush

:t sew

:t struct

------------sew------------
Type: Pattern Bool -> Pattern a -> Pattern a -> Pattern a

sew Uses a pattern of boolean (true or false) values to switch between two other patterns.
For example the following will play the first pattern for the first half of a cycle,
and the second pattern for the other half.

d1 $ sound (sew "t f" "bd*8" "cp*8")

The above combines two patterns of strings, and passes the result to the sound function.
It's also possible to sew together two control patterns, for example:

d1 $ sew "t <f t> <f [f t] t>" (n "0 .. 15" # s "future") (s "cp:3*16" # speed saw + 1.2)

You can also use Euclidean rhythm syntax in the boolean sequence:

d1 $ sew "t(11,16)" (n "0 .. 15" # s "future") (s "cp:3*16" # speed sine + 1.5)


---------- selectF//select

d1 $ selectF (cF 0.5 "22") [id,rev, fast 2,(+ speed 2)] $ sound "cp(3,8)"

hush

--------------------------

:t selectF

d2 $ sound (select (cF 0.5 "21") ["sn:4*3","bd*3"])



----------- Yaxu q&a End -----------

hush

xfade "yes" $ sound "yes:14"

xfadeIn 1 16 $ sound "bd(5,8)"

xfade "susan" $ sound "gabba(3,8,<0 2 4>)"

xfade "susan" $ sound "cp*2"

:t xfade


The different arpeggiate modes are:

up down updown downup up&down down&up converge
diverge disconverge pinkyup pinkyupdown
thumbup thumbupdown

The different chords available are:

major maj minor min major7 maj7 dom7 minor7 min7 aug
dim dim7 one 1 five 5 plus sharp5 msharp5 sus2 sus4 six 6
m6 sevenSus2 7sus2 sevenSus4 7sus4 sevenFlat5 7f5 m7flat5
m7f5 sevenSharp5 7s5 m7sharp5 m7s5 nine m9 m7sharp9 m7s9
maj9 nineSus4 ninesus4 9sus4 sixby9 6by9 m6by9 sevenFlat9
7f9 m7flat9 m7f9 sevenFlat10 7f10 nineSharp5 9s5 m9sharp5
m9s5 sevenSharp5flat9 7s5f9 m7sharp5flat9 eleven 11 m11
maj11 elevenSharp 11s m11sharp m11s thirteen 13 m13

let shrand n = (n <~) $ rand


d1
  $ sound "numbers"
  # n (choose [1 .. 9])

d1
  $ sound "numbers"
  # n (choose [1,2 .. 9])

d1
  $ sound "numbers"
  + speed (segment 10 (choose [1,1.25 .. 3]))

d1
  $ sound "numbers"
  + speed (segment 10 (choose [1,2 .. 3]))

hush


d1
  $ sound "numbers"
  # n (choose [1 .. 9])


d3 $ sew "(3,8)" ( sound "jvbass*4") ( sound "cp(2,8)")


--from Kindohm's Twitch streaming

let shrand n = (n <~)  $ rand

d1 $ degrade $ s "byd:2*16"
-- # speed (range 0.9 1.2 $ shrand 10)

d2 $ degrade $ s "arpy*16"

hush

d3 $ degrade $ s "byd:2*16" # shrand 2

d4 $ degrade $ s "arpy*16" # shrand 3 

hush

d1 $ s (segment 10 (choose ["arpy","byd"])) # shrand 2

d1 $ s (segment 10 (choose ["sn","cp"])) |* n ((21 <~) $ rand)

d2 $ s (segment 10 (choose ["sn","cp"])) |* n ((4) <~)  $ rand) # shrand 44

echophon 11:07 AM tidal


d1 $ stack [
  s "notes ~ ~ ~" # speed (range 0.5 4 $ shrand 0),
  s "~ notes ~ ~" # speed (range 0.5 4 $ shrand 1),
  s "~ ~ notes ~" # speed (range 0.5 4 $ shrand 2)
]

hush

---------

d2 $ fast 2 $ n (spread toScale [[0,3,7],[3,7,11]] (run 4))
# s "superpiano" # legato 2 # sustain 1.4 # gain 0.7


------

d1 $ fast 2 $ "bd*8" # speed "-1" # sus 0.1 + 0.05*(slow 4 sine)

vs

d1 $ fast 2 $ "bd*8" # speed "-1" # sus (slow 4 sine*0.05 + 0.1 )

==

d1 $ fast 2 $ "bd*8" # speed "-1" # sus (0.1 + 0.05*(slow 4 sine))

hush

"1 _ _ 1 _ _ 1 _"
aka "1@3 1@3 1@2"

d1
 $ slow 4
 $ n (spread toScale [hexDorian, kumai, hirajoshi, iwato] "[0 1 2 3  4 3 2 1  0 -1 0 -1  0@4]")
 # s "supermandolin" # sustain "[1 1 1 4]"


 ----
 linger' :: Pattern Time -> Pattern Time -> Pattern d -> Pattern d

linger' = tParam2 (\m n p -> _fast (1/n) $ zoomArc (Arc m (m+n)) p)

d1 $ linger' ("<[0 1 2 3 4 5 6 7] [0 1 2 0 1 2 0 1]>"/8) ("1"/8) $ s "bd hh sn:1 hh hh bd sn:1 bd"

hush

d1 $ stack $ map ($ "bd sn") [id, (0.25 <~) . fast 2]

hush


d1 $ sound "bd*32" # speed (perlin + 0.5)


d1 $ s "cp*16" + gain ( squeezeJoin $ const saw <$> ("1(3,10)" :: Pattern Int) )

let trigger osc string = ( squeezeJoin $ const osc <$> (string :: Pattern Int) )

d1
$ sound "cp*<8 16 4 <8 16 8 32>*4>*1.5"
# cutoff (trigger (rangex 15000 200 (inside "<1 2>*5" (foldEvery [3,4,5,6] (("[1 2 1]"/8) <~))
$ slow "<1 4 2 0.5>*8" $ saw)) "1 _ _ 1 _ _ 1 _")
# resonance ("[8 1 4 1 2 1]*4%6"/16)
# release (range 0.05 0.5 (slow 2 $ saw))

hush
