d1 $ overlay (sound "bd*4") $ sound "hh*2"

d2 $ superimpose ((slow "<2 1 2>") .(fast 1).(# accelerate (-2))) $ n "0*4" # s "hh"

hush

------danielmkarlsson
d1
$ (247 <~)
$ fast 1.25
$ s "bd:1(5,9)?"
# pan (slow 0.1 $ range 0 0.5 $ rand)
# rel (slow 0.11 $ choose [0.1,0.1,0.1,0.1,2])
# hpf (slow 0.12 $ rangex 200 20000 $ rand)
# up (slow 0.13 $ choose [-6,-3,0,0,0,0,3,6,9,12])
# gain (slow 0.14 $ rangex 0.5 2 $ rand)

d2
$ (378<~)
$ fast 1.25
$ s "bass(5,9)?"
# pan (slow 0.15 $ range 0.5 1 $ rand)
# rel (slow 0.16 $ choose [0.1,0.1,0.1,0.1,2])
# gain 1

d3
$ (691<~)
-- $ degradeBy (1/4)
$ s "ng:3"
# pan (slow 0.17 $ range 0.25 0.75 $ rand)
# rel (slow 0.18 $ choose [0.2,0.2,0.2,0.2,2])
# hpf (slow 0.19 $ rangex 20 20000 $ rand)
-- # up ("[11,13,16,18,20,23,27,30,32]" + choose [-24,-12,0,0,0,0,12,24])
# orbit 1
# delay (slow 0.2 $ choose [0,0,0,0.125,0.125,1])
# delayfb (slow 0.21 $ choose [0.125,0.125,1])
# delayt (slow 0.22 $ choose [(1/12),(1/12),(1/6)])
# gain (slow 0.23 $ rangex 0.125 2 $ rand)

d4
$ (367<~)
$ fast (choose [1.125,1.375,1.375,1.375,1.375])
$ degradeBy 0.9
$ s "ng:2"
# lpf (slow 0.24 $ rangex 20 10000 $ rand)
-- # up (slow 0.25 $ choose [3,3,3,3,6,9,12,15,18,24])
-- # gain (slow 0.26 $ rangex 0.5 1.25 $ rand)

d5
$ (667<~)
$ fast 1.25
$ s "ng"
# begin (slow 0.27 $ rand)
# end (slow 0.28 $ rand)
# att (slow 0.29 $ rand)
# rel (slow 0.3 $ range 1 4 $ rand)
# loop (irand 5)
# nudge (slow 16 $ range 0 3 $ sine)
# pan (slow 16 $ sine)
# cut (slow 0.31 $ choose [0,1,1,1])
# lpf (slow 0.32 $ rangex 20 20000 $ rand)
# gain (slow 0.33 $ rangex 0.5 1 $ rand)
# up (-1.25)

cps (0.2)

hush

d1 $ outside 2 (iter 4) $ n "0 1 2 3" # sound "numbers"

d2
   $ slow 2
   $ iter 4
   $ fast 2
   $ n "0 1 2 3"
   # sound "numbers"
   0 1 2 3
   01230123 ->0 1 2 3 0 1 2 3
   23012301
   01230123
   23012301

hush

d1
 $ ("<0 0 0.25 0.25 0.5 0.5 0.75 0.75>" <~ )
  $ n "0 1 2 3" # sound "breaks125"

  0 1 2 3
  0 1 2 3
  1 2 3 0
  1 2 3 0
  2 3 0 1
  2 3 0 1
  3 0 1 2
  3 0 1 2
  --correct

  ranrotL maxrotation p = spreadChoose ($) l $ p
    where l = [rotL (x) | x <- [0.00, 0.01 .. maxrotation]]

  d1 $ ranrotL 0.2 $ sound "bev"

--2018-1-8=>2019-1-1 (spaceOut//map)
hush

(1/) <$> [1,1.7..8]
--equals
(map (1/) [1,1.7..8])

d2
   $ stut' 3 0.5 (
                    (+resonance (slow 2 $ sine*1)).
                    (+ coarse "0.2(3,8)").
                    (+ speed (segment 20 $ (choose [0.1,-0.2,0.4,-0.4,0.42,0.5,0.7,-0.5,0.8]))).
                    (+| pan (smooth $ "1 0.4 0.1 0.9")).
                    (+| n (scan 3))
                  )
   -- $ slow
   $ spaceOut ( ((1/) <$> [1,1.5..8]) ++ (map (1/) [8,7.75..1]))
   $ s "[bass]"
   -- + speed "[1]"
   + cutoff (slow 4 $smooth$   range 2000 4000 $ sine)
   + cutoff (slow 17 $ range 3000 1000 $ sine)
   + resonance (slow 4 $ sine*1)
   + begin  (segment 10 $ smooth $ range 0.02 0.25 $ rand)
   -- +| cutoff (segment 10 $ smooth $ range 2000 8000 $ rand)

hush

-- drone

 d3
    -- $ jux (0.1 <~)
    -- $ slow (15/2)
    $ stut' 4 0.25 ((|+|begin (slow 4 $sine)).(|*|gain "0.6").(|+|speed (choose [0.1,-0.2,0.2,0.3,0.4,0.24])).(|+| pan "1 0"))
    $ slow 2.5
    $ density "1" $ spaceOut ( (map (1/) [1,1.4..8] ) ++ (map (1/) [8,7.75..1]))
    -- $ every 2 (|=| accelerate (slow 3 $sine1))
    -- $ slow 4
    $ n (irand 5)
    # s "[sing4]"
    -- |+| sustain (choose [0.5,0.3,0.4,0.5,0.2])
    -- |+| sustain "1"
    # cut "0"
    |+| gain "0.6"
    |+| cutoff (sine1*2000)
    |+| speed "[0.4]"
    -- |+| begin "0.4"
          -- # room "0.9"
    -- |=| delay "0.8"
    -- |=| delayfeedback "0.5"

hush

cps 1

       d5 $ slow 2.5 $ density "1"
          $ spaceOut ((map (1/) [1,1.4..8] ) ++ (map (1/) [8,7.75..1]))
          -- $ jux ((stut 10 0.5 0.02).(|+|pan "1 0"))
          $ s "[ng:1]"
          # cut "0"
          # gain "1"
          # room "0.8"

    d4
       -- $ degradeBy "<0.3 0.1>"
       -- $ density "0.4"
       -- $ every 6 ((|+| speed "[0.3 0.5]"))
       -- $ every 7 ((|+| up "1.5"))
       $ whenmod 4 0 (sometimes (density ( choose [0.3, 0.2 ,0.1])).((stut 6 0.5 0.12).(|+| speed (choose [0.2,0.4,0.6,0.8,0.5,-0.2])) ))
       $ slow 3
       $ spaceOut ( (map (1/) [1,3.5..8] ) ++ (map (1/) [8,7.75..1]))
             $ s "ng:3 ng"
             # cut "0"
             # begin (range 0.04 0.2 $ sine)
             -- # sustain (range 0.2 1 $ sine1)
             # gain "1.5"



d3 silence

d3 $ spaceOut ( (map (1.5/) [1,1.5..10] ) ++ (map (1/) [8,7.75..3]))$ s "ng:3"

d4 $ spaceOut ( (map (1/) [1,1.5..10] ) ++ (map (1/) [8,7.75..1]))$ s "ng:2"

d4 $ spaceOut [1,2,3]  $ s "bd"


cps (1.2)


hush

  -- |+| gain (slow 2 $ sine1)

  d2 $ slow 2 $ density "<1>" $ spaceOut ( (map (1/) [1,1.25..9] ) ++ (map (1/) [8,7.75..1.2])) $ s "bd:1"
  |+| gain (slow 2 $ sine)
  # pan (slow 0.1 $ range 0 0.5 $ rand)
  # rel (slow 0.11 $ choose [0.1,0.1,0.1,0.1,2])
  -- # hpf (slow 0.12 $ rangex 200 20000 $ rand)
  # up (slow 0.13 $ choose [-6,-3,0,0,0,0,3,6,9,12])

hush


----
  kindohm 上午10點17分
  ok....
  I have something like this:
  `stut' 8 0.125 id $ s "bd"`
  but I want the "0.125" part to be a pattern ranged on a sine function
  something like:
  `stut' 8 (range 0.001 0.1 $ slow 20 sine) id $ s "bd"`
  but that doesn't work. is this possible?

----
  yaxu 下午5點44分
  @kindohm try `stut' 8 (toRational <$> (range 0.001 0.1 $ slow 20 sine)) id $ s "bd"`
  or this `sine'` seems to work without the torational bit
  `let sine' = realToFrac <$> sine`
  actually it seems like it would be good to generalise sine, square, rand, etc in this way so they work both for float and rational (time) numbers
  travelling atm but if someone has a moment to make a github issue on that, it'd be good!
d1 $stut' 8 (toRational <$> (range 0.001 0.1 $ slow 20 sine)) id $ s "bd"

:t stut'


--2018_12_17 from tidalcycles blog

"1 2 3" |+ "4 5"    --5 6 8

"1 2 3" +| "4 5"    --5 7

"1 2 3 4" +| "4 5"  --5 8

"1 2 3 4 5" +| "4 5"-- 5 8

"1 2 3 4 5" |+ "4 5"-- 5 6 7 9 10

"1 1 0 " +| "0 0"   --1 1

"1 1 0 "|+ "0 0"    --1 1 0



Unified pattern operators

|+|, |+ and +| all work on patterns of parameters

(now known as control patterns) as well as patterns of numbers.

So these two are the same:

d1 $ n ("1 2 " + "3 4 5") + s "numbers"

--4 [5 6] 7

d1 $ n ("1 2 " + "1 2 " + "3 4 5") + s "numbers"
--5 [6 8] 9

---little track
d1 $ n ("1 2 3? 4?" + "[1 2 ~ ~ ~ ~]%12" ) + s "[pad,bd*3]" + n (irand 10)

d2 $ sound "[[feel(3,7,5)]*2 jvbass(5,18,7)]/2.5]"
   + n "<1,~,<3,4,5,7,1>,5>*2 <1,4,5,2>"
   # cut 0
--

a

hush

and

d1 $ n "1 2" + n "3 4 5" + s "numbers"

Of course there are also *, /, % and - versions of the above.

There is also |>| and |<| and friends;

the arrow there points at where the values come from.

So you could do "[1 2] [3 5 6]" |> "5 2" to take the structure from the left,

and the values from the right, giving you "[5 5] [2 2 2]". Aha!

|> basically does what # does now, we’ll likely keep that as an alias..



hush

d1
-- $ loopAt 1
-- $ chop 4
$ n ("1" + "1 4" * "3 <4,1,2,3> 5? <12,3,4,5>" + "[<1,2,3,~,5,~,9,12> <~,1,0,~> <8,2,3,4> ~]") + s "[breaks125]" + cut 1


d1 $ sound "bass" # speed (1+(2.0**("[1]"/12)))

:t (map (1/) [1,1.25..9] )

(map (1/) [1,1.25..9] )

hush

d1 $ every "[3 4]" (fast 2) $ sound "bd*8"

d1 $ compress (0,1/3) $ sound "bd*4"

d1 $ sound (discretise 8 $ choose ["bd","snare"]) # gain 1.2 # legato 2

hush

-- struct gives structure (the value 'x' isn't used, but its structure is)
d1 $ sound (struct "x(3,8) x*2" $ choose ["bd","snare"]) # gain 1.2 # legato 2

d1 $ n (scan 8) # sound "drum" # speed 2

d1 $ jux (rev . (4.25 <~)) $ n (scan 8) # sound "sn" # speed 2

hush


:t [1,2..4]

:t (run 8)

d4 $ repeatCycles 4 $ struct "x*8?" $ sound "arpy" +| note (irand 16)

d4 $ loopFirst $ struct "x*8?" $ sound "bd" # speed 2 # room 0.1 # sz 0.5

queryArc "1 2 3" (0,1)

:t queryArc


rev "0 1 2 3 4 5 6 7" is the same as "7 6 5 4 3 2 1 0"
inside 2 rev "0 1 2 3 4 5 6 7" gives "3 2 1 0 7 6 5 4"


d1 $ s "drum" + n "<1 5>..[1 3]"

d1 $ s "drum*8" # n "0..8"

d1 $ s "drum*8" # n "0 .. 8"

hush


yaxu 7:22 AM
live coding isn't well defined in general, but for me livecoding is a shared experience whereas algorithmic
composition is where I'm on my own. As a result my mode of listening and sense of time changes completely


------pattern chunk
d1 $ chunk "<7 3 5>" (hurry 2) $ s "hh*2 lt"
-- dont work

d1 $ do x <- "<7 .. 15>"
        chunk x (hurry 3) $ s "hh*2 lt"

----------inside-----------
Type: inside :: Pattern Time -> (Pattern a -> Pattern b) -> Pattern a -> Pattern b

inside carries out an operation 'inside' a cycle.
For example, while rev "0 1 2 3 4 5 6 7" is the same as "7 6 5 4 3 2 1 0",
inside 2 rev "0 1 2 3 4 5 6 7" gives "3 2 1 0 7 6 5 4".
What this function is really doing is 'slowing down' the pattern by a given factor,
applying the given function to it, and then 'speeding it up' by the same factor. In other words, this:

inside 2 rev "0 1 2 3 4 5 6 7"
Is doing this:
fast 2 $ rev $ slow 2 "0 1 2 3 4 5 6 7"
.. so rather than whole cycles, each half of a cycle is reversed.

d1
  -- $ inside 4 (every 2 rev)
  $ striate 16
  $ sound "bd*8"

-----------------------------------
what does "rot" do


-----------------all-----------------------
all = streamAll tidal

all ((+| n (slow 2 "1 .. 20")).(+ speed sine))

d1 $ sound "bd"

d2 $ sound "tt4b"

turn off all

all = id

hush

------asap-----
Play one cycle of pattern immediately.

asap $ sound "cp"


------runwith??--------every?
d3
$ runWith 4 (# speed 5) 
$ sound "bd"

hush

:t runWith

----rot ????-------

try~~~~
complete SC synth

https://github.com/musikinformatik/SuperDirt/blob/develop/library/default-synths-extra.scd


striate (round <$> (segment 1 $ range 1 16 $ cF 1 "cc32"))



-------------
yaxu 4:28 AM
yep ++ does list concatenation and no other magic
basic arithmetic does indeed work fine on continuous patterns,
you used to have to do (+) <$> sine <*> saw in the old days,
now it's just sine + saw


[1,2,3,4] ++ [5,6,7,8] === [1,2,3,4,5,6,7,8]

d1
$ sound "arpy*20"
# speed ((slow 2 sine) + (slow 2 sine))
# cut 1
# cps 1

hush

let tickle = every "<2 3>" (fast "<2 4 6>" . (|+| speed (
                                                        (range 1 2 $ fast 0.25 tri) *
                                                        (range 1 3 $ fast 0.125 sine)
                                                        )))

hush

-----YAXU splice is fun

d1 $ splice 64 "1(3,8) [3 5] [2 5] 5*4" "bev"

d1 $ tickle $ jux rev $ splice 64 (iter 4 $ "<1 1> <3 5> <2 5*2> 5" + "<0 16 32*2 48>") "bev"


--ovitus

do --YSXJZU modify away
setcps 0.53 
let eup= [ ("a", "1(8 4, 16, 0 1)")
         , ("b", "1(16 3, 16, 0 1)") 
         , ("c", "1(8, 16)")
         , ("d", "1(7 3, 16, 0 1)")
         , ("e", "1(4 9 1, 16)")
         , ("f", "1(9 . 4 2, 15 16)")
         , ("g", "1(4 14, 16, 0 1)")
         ]
let mar= markovPat 128 0
--       [ [0,0,0,0,0,0,0], [0,0,0,0,0,0,0], [0,0,0,0,0,0,0], [0,0,0,0,0,0,0], [0,0,0,0,0,0,0], [0,0,0,0,0,0,0], [0,0,0,0,0,0,0] ]
         [ [0,6,0,2,0,2,0], [1,0,3,0,4,0,2], [8,2,0,0,0,0,0], [2,0,2,1,1,4,0], [0,0,7,0,1,0,2], [2,0,3,0,2,0,3], [0,7,3,0,0,0,0] ]
    p = perlin2With (isaw*2) (cosine*3)
    sam= [ (# begin (range 0.1 1 $ p)).(# legato (range 0.1 0.6 $ p)).(# speed (range 0.1 0.9 $ p)) $ s (fmap ((map show [1..7])!!) ((0.2 ~>) mar)) # pan 0.2 # orbit 1
         , (# begin (range 0.1 1 $ p)).(# legato (range 0.2 1.0 $ p)).(# speed (range 0.2 1.5 $ p)) $ s (fmap ((map show [1..7])!!) ((0.3 <~) mar)) # pan 0.3 # orbit 2
         , (# begin (range 0.1 1 $ p)).(# legato (range 0.3 0.9 $ p)).(# speed (range 0.3 1.0 $ p)) $ s (fmap ((map show [1..7])!!) ((0.4 ~>) mar)) # pan 0.4 # orbit 3
         , (# begin (range 0.1 1 $ p)).(# legato (range 0.4 0.7 $ p)).(# speed (range 0.4 1.3 $ p)) $ s (fmap ((map show [1..7])!!) ((0.5 <~) mar)) # pan 0.5 # orbit 4
         , (# begin (range 0.1 1 $ p)).(# legato (range 0.1 0.5 $ p)).(# speed (range 0.1 1.0 $ p)) $ s (fmap ((map show [1..7])!!) ((0.6 ~>) mar)) # pan 0.6 # orbit 5
         , (# begin (range 0.1 1 $ p)).(# legato (range 0.2 1.1 $ p)).(# speed (range 0.2 0.8 $ p)) $ s (fmap ((map show [1..7])!!) ((0.7 <~) mar)) # pan 0.7 # orbit 6
         , (# begin (range 0.1 1 $ p)).(# legato (range 0.3 1.0 $ p)).(# speed (range 0.3 1.0 $ p)) $ s (fmap ((map show [1..7])!!) ((0.8 ~>) mar)) # pan 0.8 # orbit 7
         ]
let orc= "<a b c>"
let sy1= struct (every 3 inv (inhabit eup orc)) $ arp "<pinkyup up converge>" $ n "<bs'sevenFlat10'4 af'sevenFlat10'6>" # "[m1]" # nudge (range 0 1 $ slow 8 sine)
let sy2= struct (every 3 inv (inhabit eup orc)) $ arp "<pinkyup up converge>" $ n "<bs'sevenFlat10'4 af'sevenFlat10'6>" # "[m2]" # nudge (range 0 1 $ slow 8 sine)
let sap= struct (every 3 inv (inhabit eup orc)) $ (|+| begin 0.06).(|+| legato 0).(|+| speed 0) $ squeeze "[1,2,3,4,5,6,7]" sam
let bdp= struct (every 3 inv (inhabit eup orc)) $ "9b:32 9s:39 9b:29 9cp:20 9s:43" # orbit "0 9 0 9 9" # pan (range 0.25 0.75 $ p) 
d1 $ stack [sy1, sy2] 
d2 $ bdp
d3 $ sap
--all $ id
all $ pickF (stitch (every 3 inv (inhabit eup orc)) 0 1) [id,striate 2] -- . (# nudge (range 0 1 $ slow 8 sine))
d4 $ ccv (stitch (every 3 inv (inhabit eup orc)) 0 127) # ch 2 # ccn 55 # "m2" 
d5 $ ccv (stitch (every 3 inv (inhabit eup orc)) 127 0) # ch 2 # ccn 55 # "m1"


--kriyananda

d1 $ stack [
-- drumz!
slow 2
$ whenmod 60 59 (#lpf (fast 2 $ range 400 5000 $ sine))
$ whenmod 50 49 (# vowel "[a i o]*2")
$ whenmod 32 31 (stut' 8 0.125 (# up "[2 4 8 10]").(#gain 0.8))
$ whenmod 9 8 ((#gain 0.8).(# crush 6))
$ whenmod 20 16 (# speed 0.75)
$ whenmod 27 24 ((# room 0.5).(#gain 0.5))
$ whenmod 12 10 (chop 32)
$ whenmod 18 16 (# hpf (slow 8 $ range 300 1000 $ sine))
$ every 3 ((# shape 0.6).(#gain 0.5))
$ every 9 (within (0.25, 1)(rev.(stut 8 0.2 (1/16))))
$ every 5 (within (0,0.15) ( (# delay 0.4).( # phasr 1.5).(# phasdp 4.8) ))
$ every 23 (within (0,1.25)(rev))
$ every 16 (degradeBy 0.25)
$ every 6 (within (0, 0.5) (# speed ( fast 2 $ range 1 5 $ tri) ))
$ sound "[simo*8]" # n (irand (16))
# pan (slow 2 $ range 0.2 0.8 $ sine)
# gain 0.6,
slow 2 $ s "arpy" # gain 0.7
] 

--compressor //spednar

https://github.com/supercollider-quarks/BatLib


----
9:44 PM
hi, before open a github issue some questions...

with this piece of code:

d1
  $ juxBy 0.4 (|+| octave 1)
  $ s "superpiano*4"


the note on the right channel is on octave 1 and not on octave 6 like I was expecting.
instead with

d1
  $ juxBy 0.4 (|+| octave 1)
  $ s "superpiano*4"
  # octave 5


it works like expected. maybe the octave default value it's not recognized by "|+|" operator (the same for |-|)?
another question. with this code:

d1
  $ juxBy 0.8 (|+| octave (irand 4))
  $ s "superpiano*4"
  # octave 5


the right channel does not play, the same using choose
function. I am missing something?
9:57 PM
the last one, I promise 😃
how can I convert a Fractional Int to an Int? this code gives me error, I think it's because
segment samples the pattern but always returns Fractional Int values, right?

d1
  $ juxBy 0.8 (# octave (segment 1 $ range 1 4 $ sine))
  $ s "superpiano*4"
  # octave 5

9:57 PM
you probably want one of
round floor ceiling truncate
which convert real fractional values to integral values
and you probably need
fmap or <$>
to map it over a pattern
10:44 PM
yes
d1 $ s "superpiano*4" |+| octave 1
will set octave 1, rather than add 1 to a default value
the addition in |+| only happens if there's more than one value explicitly added
you have to give
irand
some structure if you want to hear it

d1 $ sound "superpiano" + octave (irand 4) -- no sound
d1 $ sound "superpiano" + octave (segment 8 $ irand 4) -- sound
d1 $ sound "superpiano*4" |+ octave (irand 4) -- sound

10:51 PM
.. and the round working:

d1 $ octave (segment 16 $ round <$> (slow 2 $ range 1 8 $ sine))
   # s "superpiano"



once $ repeatCycles 2 $ sound "bd bd cp cp" # cps (78/60/4)


d4 $ "hh*8" # nudge (range 0 1 $ slow 4 sine)

hush

d9 $ every 2 (# nudge (range 0 1 $ slow 4 sine)) $ s "hh*8" 

d1 $ s "cp*4" # nudge (squeeze "[0 0 0 0 1]/5" [slow 4 $ range 0 1 sine, 0])

d1 
$ arpeggiate $ sometimes (withEvents (reverse)) 
$ stutWith (choose [16, 4, 8, 32]) 0 (|* gain 0.9) $ chunk 4 (fast 2) 
$ s "sd:4(<5 3>,8,<2 4 5>)"


-- r.tyler.mclaughlin
11:58 AM
figured out a way to make a flanger in tidal:

let flanger1 lforate amt = nudge (fast lforate $ range (-amt) amt sine) 

let flanger2 lforate lfopitch = speed (fast lforate $ range (1 - lfopitch) (1 + lfopitch) sine)

d1 $ euclid 3 8 $ stack [s "[arpy:1, arpy:5, arpy:7]", s "[arpy:1, arpy:5, arpy:7]" # flanger1 0.051 0.01 # flanger2 0.051 0.02] 