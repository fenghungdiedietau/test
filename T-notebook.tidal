======Speed=======
speed "nagtive value"==>play backward

d1
  $ loopAt 4
  $ rev
  $ every 2 (+ speed  "-0.5")
  $ chop "<32 10 20>"
  $ sound "bev*2"
  # gain 1.5

======Spread=======

d1 $ spread fast[2,3] $ sound "ho ho:2 ho:3 hc"

equals to

d1 $ fast <2 3> $ sound "ho ho:2 ho:3 hc"

pass ($) as the function to spread values over,
you can put different functions as the list of values

let a = slow 2 $ smooth $ segment 50 $ range 0.1 4 $ sine
    b = a*2
    c = a*3
    d = 10
    in
    d1
    -- $ fast a
    $ spread ($) [
            off a (juxBy a (# speed a).(stut d a a)),
            off b       (# speed b).(stut d b b),
            off c       (# speed c).(stut d c c)
            ]
    $ struct ("[[t f]*2 [f t]*3 t]")
    $ sound "[bd [cp:4 bass3]/3] bd ~"
    -- + n (slow 1000 $ run 1000)
    -- # cut 1

hush

let a = (slow 10 $ degradeBy 0.2 $ segment 32 $ range 0.1 0.9 $ saw )
    b = (round <$> a*30)
in
d2
$ striate b
$ spread ($)
[jux (# lpf (1700*a)),jux (# lpf (3000*a)),(+ pan sine)]
$ sound "tt4b:2"
+ begin a


hush

=====Chop=====
chop :: Pattern Int -> ParamPattern -> ParamPattern
chop granualizes every sample in place as it is played,
turning a pattern of samples into a pattern of sample parts.
Use an integer value to specify how many granules each sample is chopped into:

d2
  $ chop 4
  $ sound "arpy feel"

  a_r_p_y f_e_e_l

d2
  $ slow 2
  $ chop 4
  $ sound "arpy feel ~"

d2
  $ chop 200
  $ sound "[arpy(3,8),arpy:2(3,8) ~,arpy:3(3,8) ~ ~,arpy:4(3,8) ~ ~ ~,arpy:5(3,8) ~ ~ ~ ~]"

hush

d1
  $ slow 2
  $ striate 4
  $ sound "arpy feel"

  a_f_r_e p_e_y_l

hush

d1
  $ slow 2
  $ striate 4
  $ sound "arpy feel ~ "

  a_f_~_ r_e_~_ p_e_~_ y_l_~_


=====Cat=====
d2
$ cat [s"bd*4", s"hh*4", s"cp*4", s "sn*2" ]

hush

=======Pattern chop (int) parameter:=======

"<  >"
or
(round <$> (slow 10 $ segment 32 $ range 10 20 $ saw ))


d1 $ chop "<4 1 3>"
   $ sound "arpy ~ feel*2 newnotes"
   # room ((slow 4)sine*2)
   # size ((slow 5)sine*1.3)

d1
  $ chop  (round <$> (slow 3 $ segment 16 $ range 10 20 $ saw ))
  $ sound "arpy ~ feel*2 newnotes"
  # room ((slow 4)sine*2)
  # size ((slow 5)sine*1.3)

hush



You end up with a pattern of the chopped up bits of samples,
so for example if you then reverse the pattern,
you reverse the order of the bits:


d1
  $ rev
   (run 3)
  $ loopAt 1
  $ sound "bev"

hush


======Superimpose=======

d1 $ density "{1! [2 ~] 4! ~}%5"
   $ slowcat [
    superimpose (smash 4 [4,2,1,4]) $ jux rev $ sound (samples "{gretsch*4, gretsch*3 bd*2 sn/2}" (stack [(slow 3 $ run 8), "1 5 2"]))
              |+| speed "2",
              interlace
              (jux (0.25 <~) $ (striate 4) $ sound "bd/4*4 bleep/7")
              (sound (samples "mouth*8" (every 3 rev $ run 8)))
             ]

hush

d1 $ superimpose (smash 4 [4,2,1,4])
   $ jux rev
   $ sound (samples "{gretsch*4, gretsch*3 bd*2 sn/2}" (stack [(slow 3 $ run 8), "1 5 2"]))



=======Interlace // Samples //========

d1
  --  $superimpose ((smash 4 [4,2,1,4]).(brak))
   -- $juxBy 0.1 ((fast 2).(every 3 (0.3 <~)).(brak))
  $ density 1.2
  $ interlace
     (sound (samples "{808:5*4 ,bd*2 cp*3 gretsch*4}" (slow 1 "4 7 5 ")))
     (sound (samples "{808:3*3 ~,bd:3*2 [sn:3 ~]/5 gretsch*4}" (fast 4 "3 7 5")))
  --  # size (slow 3 "{0.2 0.3 0.5}%7")
  --  # room (slow 3 $ "[0.1(3,5),0.7(4,5)]" )


d1
  -- $superimpose ((smash 4 [4,2,1,4]).(brak))
  $juxBy 0.5 ((fast 2).(every 3 ("<0.2> " <~)).(brak))
  -- $ interlace
  -- $chunk 12 (rev).(smash 8[7,3,10]).(iter 3).(#gain 1)
  $ (sound (samples "{808:7*2 808:2 ,bd*2 cp*3 gretsch*4}" (slow 4 "4 7 5")))
    -- (sound (samples "{808:4*3 ~,bd:3*2 [sn:3 ~]/5 gretsch*4}" (fast 4 "3 7 5")))
  # size (slow 1 "{0.2 0.7 0.5}%4")
  # room (slow 4 $ "[0.1(3,5),0.7(7,10)]" )

hush

=======Stack Parameters========

d1 $ sound (samples "{gretsch*4, gretsch*3 bd*2 sn/2}" (stack [(slow 3 $ run 8), "1 5 2"]))

d1 $ density 4 $ sound (samples "<arpy*5 arpy*2>" (every 3 (fast 1) $ run 6))

hush

========Smash========
smash
smash :: Int -> [Time] -> ParamPattern -> ParamPattern
Smash is a combination of spread and striate - it cuts the samples into the given number of bits,
and then cuts between playing the loop at different speeds according to the values in the list.

So this:

d1 $ smash 3 [2,3,4] $ sound "ho ho:2 ho:3 hc"

Is a bit like this:

d1 $ slow "<2 3 4>" $ striate 3 $ sound "ho ho:2 ho:3 hc"

d1 $ superimpose (smash 4 [1,2,1,2])  $ sound "bd sn [cp ht] hh"

hush

d1 $ every 4 (rev . chop 8) $ superimpose (iter 4) $
              every 2 (slow 2) $ stack [sound (samples "cp(3,8)" (slow 10 $ run 12)) |+| speed "1" |+| pan "0",
                                        sound (samples "bd(5,8)" (slow 12 $ run 12)) |+| speed "0.9" |+| pan "1"
                                       ]
            |+| delay "0.9"
            |+| delaytime "0.02 0.01"


========Scan========

d1 $sound (samples "cp*4" (slow 12 $ scan 12))

d1 $ sound (samples "[sd8, jvbass]*100" (slow 1 $ scan 8))

========FoldEvery========


hush

foldEvery
foldEvery :: [Int] -> (Pattern a -> Pattern a) -> Pattern a -> Pattern a
foldEvery transforms a pattern with a function, but only for the given number of repetitions. It is similar to chaining multiple every functions together.

Example

d1 $ foldEvery [3, 4, 5] (fast 2) $ sound "bd sn kurt"

d1
  $ foldEvery [2,3]  ((|+|cutoff (sine1*3000)).(slow "[1 3]").(jux (|+| pan "0.2")).(0.3 <~))
  $ foldEvery [3,4,8]( (whenmod 4 3 $ (|+| speed "1.5" ).(0.125<~)).(striate 3))
  $ sound "[app:4*2 ,[bd:4  ~] cp:3/3 bd:3]"
  #cut"1"

d1 silence

this is equal to:

d1 $ every 3 (fast 2) $ every 4 (fast 2) $ every 5 (fast 2) $ sound "bd sn kurt"



Interlace
interlace :: ParamPattern -> ParamPattern -> ParamPattern
(A function that takes two ParamPatterns,
and blends them together into a new ParamPattern.
A ParamPattern is basically a pattern of messages to a synthesiser.)

Shifts between the two given patterns, using distortion.

Example:

d1 $ interlace (sound  "bd sn kurt") (sound  "arpy arpy:2 cp")



hush

Picking samples

You can have one pattern for sample names,
and another of sample numbers,
and combine them to pick which sample you want.

d1 $ sound (samples "drum arpy newnotes" "0 1 2")
This isn't very exciting until you start manipulating
the patterns before combining them, and as in the below adding a bit more
pattern manipulation on top:

d2 $ jux (density 3)
   $ sound (samples "drum can can" (slow 2.5 "0 1 2 4 5 6 7 "))

hush




Lets try that reverse in just one speaker:

d1 $ slow 4 $ jux rev $ chop 8 $ sound "bev"

Different values of chop can yield very different results,
depending on the samples used:

d1 $ chop 16 $ sound (samples "arpy*8" (run 16))

d1 $ chop 32 $ sound (samples "arpy*8" (run 16))

d1 $ chop 256 $ sound "bd*4 [sn cp] [hh future]*2 [cp feel]"

You can also use chop (or (striate)[#striate]) with very long samples,
to cut it into short chunks and pattern those chunks.
The following cuts a sample into 32 parts, and plays it over 8 cycles:

bps(120/120)

d2 $ s"bd"

d1
  $ loopAt "[1 0.4 4 0.2]" $rev$ chop 16 $ sound "app:2"

d3
  $ loopAt "<8 2 3 4>" $ chop "<6 16 8>" $ sound "bev"

hush

The loopAt takes care of changing the speed of sample
playback so that the sample fits in the given number of cycles.

You can’t hear that the sample has been cut into bits in the above.
This becomes more apparent when you do further manipulations of the pattern,
for example rev to reverse the order of the cut up bits:

d1 $ loopAt 8 $ rev $ chop 64 $ sound "bev"

d1 $ loopAt 8 $ chop 32 $ sound "bev"

=======Run========
run n generates a pattern representing a cycle of numbers
from 0 to n-1 inclusive.
Notably used to ‘run’ through a folder of samples in order:

d1 $ n (run 8) # sound "bd"

d1 $ every 2 (slow 2) $ n (run 8) # s "cs"

hush

The first parameter to run can be given as a pattern:

d1 $ n (run "<4 8 4 6>") # sound "amencutup"


=======LoopAt========

loopAt makes sample fit the given number of cycles. Internally,
it works by setting the unit parameter to “c”,
changing the playback speed of the sample with the speed parameter,
and setting setting the density of the pattern to match.

d1 $ loopAt 2 $ sound "cs:4"


It’s a good idea to use this in conjuction with chop,
so the break is chopped into pieces and you don’t have
to wait for the whole sample to start/stop.

d1 $ slow 1 $ (loopAt 4 (density 4) $ "[{[2 4]3 6}%4,4(3,4)]" )
   $ slow "<3 1 2>" $ chop 20 $ sound "app:1"

-- d1 $ slow 2 $ loopAt "[{[2 4]3 1}%3,3(2,7),4(4,12)]/2"
   d1 $ slow "[3 1 2]" $ chop 4 $ sound "app:2"

hush

   d1 $ fast 2 $ loopAt "[{[2 4]3 1}%3,4(2,7),6(3,12)]/2"
      $ slow "[3 1 2]" $ chop 3 $ sound "cs:2"

hush

Like all tidal functions, you can mess about with this considerably.
The below example shows how you can supply a pattern of cycle counts to loopAt:

d1 $ juxBy 0.6 (|*| speed "2") $ loopAt "<4 6 2 3>" $ chop 32 $ sound "app:4"

hush

linger
linger :: Pattern Time -> Pattern a -> Pattern a
Similar to trunc, in that it truncates a pattern so that only the first
fraction of the pattern is played. However unlike trunk, linger repeats
that part to fill the remainder of the cycle.

The following example plays only the first three quarters of the pattern. For example this repeats the first quarter, so you only hear a single repeating note:

d1 $ linger 0.25 $ n "0 2 [3 4] 2" # sound "arpy"

or slightly more interesting, applied only every fourth cycle:

PLAY
hush

d1 $ every 4 (linger 0.5) $ n "0 2 [3 4] 2" # sound "breaks125"

or to a chopped-up sample:

PLAY
d1 $ every 2 (linger 0.25) $ loopAt 2 $ chop 8 $ sound "breaks125"

You can also pattern the first parameter,
for example to cycle through three values, one per cycle:

PLAY
d1 $ trunc "<0.75 0.25 1>" $ sound "bd sn:2 [mt rs] hc"
PLAY

d1 $ linger "<0.25 0.5 1>" $ loopAt 4 $ chop 32 $ sound "app:2"

# speed ((0.2*) <$> (slow 2) sine1)
$ within(0.2,0.7) (juxBy 0.7 ((rev).(#speed (slow 3 $ sine*2))))
$ within(0.5,1)(|+| speed ($ sine*3))

hush

---apure

d1
$ jux (rev)
$ weave 16 (chop "3" $striate' 8 0.2 $ sound "app:2")
[iter 5  (vowel "e ~ a ~ u")|+|pan "0 1 1"|+| speed "<2 3 4>",
iter 3 (speed "{2 3? 1 0.5}%3")
]

hush

d1 $ every 2 (slow "<4 5 6>") $ (juxcut (rev . iter 3)
   $ every 3 (0.25 <~) $ striate' 4 0.01$ sound "[app:2,app:4]")
   |+| speed "[{2! 1 ~ 4}%4,3]"

d1 $ (superimpose (iter 8) $ sound (pick <$> "app app:2" <*> "[1 2 3 4]/5"))
|+| speed "[1 0.75 0.5 1]/2"

d1 $ stack [slow 1 $ every 1 (rev) $ slow 12 $ striate' 224 0.1 $ sound "[app:2]*6"
            |+| pan "1"
           ,
            slow 2 $ every 2 (rev) $ slow 12 $ striate' 22 0.04$ sound "[app:1]*4"
            |+| pan "0"
           ]

d1 silence

d2 $ weave' 32 (slow 4 $ striate' 64 (1/32) $ sound "app:1 [app:1*2 app:2]*3/4")
  [(vowel "a e i o u" |+|),
   (vowel "i a u " |+|),
   (speed (fast 2(sine1*1)) |+|),
   (pan (slow 4(sine1*0.4)) |+|).(cutoff "15000"|+|)
  ]

  d1 $ slowspread ($) [rev, iter 3, rev, density 4]
     $ jux (rev) $ every 4 (striate 16)
     $ sound (pick <$> "app:3*2 app:1 app:2" <*> "[1 2 3 4 6]/7")
    |+| speed "2"
    |+| gain "1"

    d1 $ every 3 (slow 3) $ every 5 (density 2) $ (density 3 $ striate' 8 0.01 $ sound "app:1*3 app:2")
       |+| speed "2 3 5"

hush

d1
  $ weave 32 (sound "app:3*3" # n (run 1))
  [
    vowel "a e i",
    vowel "i [i o] o u",
    vowel "[e o]/3 [i o u]2",
    speed "1 2 1"
  ]
  # cut 1

d1
  $jux ((# speed 3) . rev)
  $ weave 4 (sound "app:4*16")
  [
  up (slow "<0.3 2 4 0.7>" (sine1*12))
  ]
  |+| gain 0.7
  |=| bsin "<1,10>" 0.5 0.9

hush


d1
  $ jux ((#speed 2).(rev))
  $ weave' 32 (sound (samples "app [app*2 app]*3/4" (run 8)))
          [
            density 4 . (vowel "a e o" |+|),
            whenmod 5 3 rev . (vowel "a e o i" |+|),
            rev . chop 2 . (vowel "o i a o i" |+|),
            slow 2 . rev . chop 4 . (speed "2 3 1" |+|),
            rev . chop 4 . (speed "-0.75 -0.5" |+|)
          ]
  #release "1"


hush
------------------------

Polymeter  a polymeter pattern is one where two patterns have different sequence lengths, but share the same pulse or tempo.

d1 $ sound "{bd hh sn cp, arpy bass2 drum notes*3 can}"
--five-note rhythm being played at the pulse of a four-note rhythm

d1 $ sound "{arpy bass2 drum notes can, bd hh sn cp}"
-- four-note rhythm over a five-note rhythm

d1 $ sound "{~ ~ ~ ~, arpy bass2 drum notes can}"
--equals

d1 $ sound "{arpy bass2 drum notes can}%4"

jux (and juxBy)

The jux function creates strange stereo effects, by applying a function to a pattern, but only in the right-hand channel.
For example, the following reverses the pattern on the righthand side:

When passing pattern transforms to functions like jux and every, it’s possible to chain multiple transforms together with "."
for example this both reverses and halves the playback speed of the pattern in the righthand channel:

d1 $ slow 32 $ jux ((# speed 0.5) . rev) $ striate' 32 (1/16) $ sound "bev"

hush

With jux, the original and effected versions of the pattern are panned hard left and right
(i.e., panned at 0 and 1). This can be a bit much, especially when listening on headphones.
The variant juxBy has an additional parameter, which brings the channel closer to the centre. For example:

d1 $ slow 16 $ juxBy 0.8 ((# speed 0.5) . rev) $ striate' 32 (1/16) $ sound "bev"

Kindohm TUTOR12

let inverse 1 = 0
    inverse 0 = 1

do
  let pat = "[1 1 0 1]"
  d1 $ gain "[1 0 1 1 0 1]" # sound "bd:6"
  d2 $ gain (inverse <$> pat) # sound"808:5"

hush

-- echo & negate nani?
d2
  $ every 1 (echo (negate 5/32))
  $ n "c5*4" # s "arpy"
  -- # accelerate "-2"
  # speed "1"
  -- # sustain "0.1 ! ! 1" # voice "0.0"

:t negate

hush


======Mortal======
mortal :: Time -> Time -> Time -> [ParamPattern] -> ParamPattern
Degrade the new pattern over time until it ends in silence

:t mortal

d1

-----------End-----------
Type: end :: Pattern Double -> ControlPattern

end turns a number pattern into a control pattern that changes the playback end position of a sample.
end takes a pattern of numbers from 0 to 1.
It controls the end point of each sample. e.g. 0.75 to only play 75% of each sample,
0.5 to only play 50%, and so on:

d1 $ s "rave/2" # end "<0 0.25 0.5>"
You can use begin to alter the playback start position of a sample.

--begin + end ==> scan


---------------Shape-----------------

Type: shape :: Pattern Double -> ControlPattern

shape produces wave shaping distortion, a pattern of numbers from 0 for no distortion up to 1
for loads of distortion. It can get very loud if you reach 1 - be careful!

--cutting shape


--------squiz--------
d1 $ s "drum*8" # squiz "1 2 8 256"

hush

-------repeatCycles
Type: repeatCycles :: Int -> Pattern a -> Pattern

repeatCycles is function that repeats each cycle of a given pattern a given number of times..
It takes two inputs, the number of repeats, and the pattern you are transforming.
For example, to repeat each random cycle of notes three times:

d1 $ repeatCycles 3 $ sound "arpy(5,8)" # n (irand 8)

hush

-----rangex
Type: rangex :: (Floating b, Functor f) => b -> b -> f b -> f b

rangex is an exponential version of range described above, good to use for frequencies.
For example, range 20 2000 "0.5" will give 1010 - halfway between 20 and 2000.
But rangex 20 2000 0.5 will give 200 - halfway between on a logarithmic scale.
This usually sounds better if you’re using the numbers as pitch frequencies.
Since rangex uses logarithms, don’t try to scale things to zero or less!


---shuffle & scramble

d1 $ sound ( shuffle 3  "bd sn hh")


d1
-- $ slice "0 1 2*2 3 16 32 20 0" 128
$ loopAt 8
$ s "bev"



-----substruct??-----

d1 $ slow 2 $ weave 16 (pan tri) [
  substruct "x/4 x/2" $ stut 3 0.9 0.5 $ substruct "x x*2" $ sound "tok(3,8)",
  substruct "x/8 x/4" $ stut 3 0.9 0.25 $ substruct "x x*2" $ sound "tok:2(5,16)/2"
  ]
  # speed "1"
  # delay "0.6" # delaytime "0.002" # delayfeedback "0.8"
  # orbit "0"



--------elem??--------

d1 $ when ((elem '4').show)
  (striate 4)
  $ sound "hh hc"

---------chunk-----------

Type: Chunk :: Int -> (Pattern b -> Pattern b) -> Pattern b -> Pattern b

chunk divides a pattern into a given number of parts, then cycles through those parts
in turn, applying the given function to each part in turn (one part per cycle).

Example:

d1 $ chunk 4 (# speed 2) $ sound "bd hh sn cp"

The below highlights in "" which part of the above pattern has the (# speed 2)
 function applied to it over four cycles:

"bd "hh sn cp
bd "hh" sn cp
bd hh "sn" cp
bd hh sn "cp"

Another example:

d1 $ chunk 4 (hurry 2) $ sound "bd sn:2 [~ bd] sn:2"

----------chunk'------------dosen't work
chunk' does the same as chunk but cycles through the parts in the reverse direction.


d1
   $ chunk 4 ((slow "<1.3 1.8 1.3>").("<0.18 0.2 >" <~).(rev))
   $ jux ((smash 6 [2,4,1,3]).(# speed "1.2").(# accelerate 0.3))
   $ sound "cp sn bd [808:1 hh:3]"



-----------stut'--------
d1
  $ slow 3
  $ stut' 5 (0.125/1) (|+| gain (every 3 (0.4 <~) $ "1 2 3 5"))
  $ sound "bd*5 [~ cp]"


---------ifp--------
ifp decides whether to apply one or another function depending on the result
of a test function, which is passed the current cycle as a number.
For example:

d1 $ ifp ((== 0).(flip mod 3))
  (striate 4)
  (# coarse "24 48") $
  sound "hh hc"

This will apply striate 4 for every even cycle, and # coarse "24 48" for every odd one.

Detail: The test function does not rely on anything tidal-specific,
it uses plain Haskell functionality for operating on numbers.
That is, it calculates the modulo of 2 of the current cycle which is either 0
(for even cycles) or 1. It then compares this value against 0 and returns the result,
which is either True or False. This is what the first part of ifp's type signature
signifies (Int -> Bool), a function that takes a whole number and returns either True or False.


---------preplace---------not in 1.0 anymore , Fit can to the same thing?
preplace :: (Time, Time) -> Pattern String -> Pattern b -> Pattern b Source #

Preplace (blen, plen) beats values combines the timing of beats with the values of values.
Other ways of saying this are: * sequential convolution * values quantized to beats.
Examples:
d1 $ sound  $ preplace (1,5) "[x? [~ x] x x?,[x(3,7)]/7]" "bd sn:2 808:5 cp 808:7"

d1
  $ ifp ((== 0).(flip mod 5))
  (#coarse "3 5 7")(#room "1 0.3 0.6").(0.23 <~)
  $ every 3(|+|speed "4 2 6")
  -- $ every 4(|+|accelerate "0.2 2.8  9")
  -- .(stut' 4 (1/2) (# vowel "{a e i o u}%2"))
  $ ifp ((== 1).(flip mod 3))
  (#speed "3 -5 ~ 9")(#room "0.6 4").(0.18 <~)
  $ sound $ preplace (1,3) "[[x(3,8)],x*2 ~ x,[x! ~] ~ ]" "bd bass3 sn 808:2"

-----------what's this---------
  swingBy
  swingBy x n divides a cycle into n slices and delays the notes in the second half of each slice by x fraction of a slice . swing is an alias for `swingBy (1%3)`

  envL
  overlay
  append
  hold
